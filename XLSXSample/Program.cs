


using ExcelDataReader;
using System.IO;
using System.Text;
using TinyCsvParser;
using TinyCsvParser.Mapping;

//string filePath = "C:\\Users\\abu_h\\Desktop\\data.csv";
//Byte[] bytes = File.ReadAllBytes(filePath);
String filecsv = "MTExMTExMTEsaWQsYmxvY2sNCjIyMjIyMjIyLGlkLGJsb2NrDQozMzMzMzMzMyxjcix1bmJsb2NrDQo=";
String file = "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";
// do something with the value, such as adding it to a list or dictionary
byCsv();

void ByExcelDataReader()
{
    byte[] fileBytes = Convert.FromBase64String(file);
    System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);
    List<datadto> list= new List<datadto>();
    using (MemoryStream ms = new MemoryStream(fileBytes))
    {
        using (var reader = ExcelReaderFactory.CreateReader(ms))
        {
            do
            {
                while (reader.Read()) //Each ROW
                {
                    int count = reader.FieldCount;
                    datadto data = new datadto();
                    data.id = reader.GetValue(0).ToString();
                    data.type = reader.GetValue(1).ToString();
                    data.action = reader.GetValue(2).ToString();
                    list.Add(data);
                }
            } while (reader.NextResult()); //Move to NEXT SHEET

        }
    }
    Console.WriteLine(list);
}
void byCsv()
{
    byte[] fileBytes = Convert.FromBase64String(filecsv);
    List<datadto> list = new List<datadto>();
    using (MemoryStream ms = new MemoryStream(fileBytes))
    {
        CsvParserOptions csvParserOptions = new CsvParserOptions(false, ',');
        CsvUserDetailsMapping csvMapper = new CsvUserDetailsMapping();
        CsvParser<datadto> csvParser = new CsvParser<datadto>(csvParserOptions, csvMapper);
        var result = csvParser.ReadFromStream(ms, Encoding.ASCII)
                     .ToList();
        Console.WriteLine("id " + "type   " + "action  ");
        foreach (var details in result)
        {
            Console.WriteLine(details.Result.id + " " + details.Result.type + " " + details.Result.action);
        }
    }
        
}
class datadto
{
    public string id { get; set; }
    public string type { get; set; }
    public string action { get; set; }
}

class CsvUserDetailsMapping : CsvMapping<datadto>
{
    public CsvUserDetailsMapping() : base()
    {
        MapProperty(0, x => x.id);
        MapProperty(1, x => x.type);
        MapProperty(2, x => x.action);
    }
}